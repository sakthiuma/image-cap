import numpy as np
import math
from numpy import linalg as la

def featureSubtraction(a,b):
    """ subtracts two vectors and returns norm of result """
    subResult = np.subtract(a,b)
    normResult = math.pow(la.norm(subResult),2)
    return normResult

def calcSigma(data):
    """ returns average distance of each two images in a dataset """
    avgDist = 0
    numPairs = 0
    i = 0
    for i in range(0,len(data)) :
        imgA = data[i]
        for j in range(i+1,len(data)):
            numPairs += 1
            imgB = data[j]
            dist = featureSubtraction(imgA['feats'], imgB['feats'])
            avgDist += dist
    sigma = avgDist/numPairs
    print 'numPairs:',numPairs
    return sigma # 9769.6811

def getImageIds(word,data):
    """returns list of image whose captions contain this word""" ##doubt - what happens if word is not in vocabulary? find out - how testing
    GSi = []               ##works. will a word never seen before be generated by the model?
    for img in data:       ##i dont think this is possible. If its not, there will be no problem with unknown
        if word in img['tokens']:  ##word weight calculation.
            GSi.append(img)
            continue
    return GSi

def calculateWeights(wordtoixdict, ixtoworddict, data):
    """ calculates weight of each word relative to the image it appears in """
    sigma = calcSigma(data)
    for img in data :
        #if img['imgid'] == 1241:
            #print 'Feats :', img['feats'] # Testing if feats has been copied correctly
        for Si in img['tokens']:
            # get list of image ids that also contain this word
            GSi = getImageIds(Si,data)
            for im in GSi:
                subtractedFeats = featureSubtraction(img['feats'],im['feats']) # subtract I - Ij
